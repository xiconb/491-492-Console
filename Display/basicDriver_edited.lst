00018                 | 
00018                 | #line 1 "C:/Users/Seth/Documents/Programming/491-492-Console/Display/basicDriver_edited.pasm"
00018                 | pub main
00018                 |   coginit(0, @entry, 0)
00018                 | dat
00018 000             | 	org	0
00018 000             | entry
00018 000 F0 61 BD A2 | 	mov	arg01, par wz
0001c 001 07 00 54 5C |  if_ne	jmp	#spininit
00020 002 04 5E BC A0 | 	mov	pc, $+2
00024 003 3E 82 FC 5C | 	call	#LMM_CALL_FROM_COG
00028 004 8C 04 00 00 | 	long	@@@_main
0002c 005             | cogexit
0002c 005 01 60 FD 0C | 	cogid	arg01
00030 006 03 60 7D 0C | 	cogstop	arg01
00034 007             | spininit
00034 007 B0 52 BD A0 | 	mov	sp, arg01
00038 008 A9 4A BD 08 | 	rdlong	objptr, sp
0003c 009 04 52 FD 80 | 	add	sp, #4
00040 00a A9 5E BC 08 | 	rdlong	pc, sp
00044 00b A9 4E 3D 08 | 	wrlong	ptr_hubexit_, sp
00048 00c 04 52 FD 80 | 	add	sp, #4
0004c 00d A9 60 BD 08 | 	rdlong	arg01, sp
00050 00e 04 52 FD 80 | 	add	sp, #4
00054 00f A9 62 BD 08 | 	rdlong	arg02, sp
00058 010 04 52 FD 80 | 	add	sp, #4
0005c 011 A9 64 BD 08 | 	rdlong	arg03, sp
00060 012 04 52 FD 80 | 	add	sp, #4
00064 013 A9 66 BD 08 | 	rdlong	arg04, sp
00068 014 0C 52 FD 84 | 	sub	sp, #12
0006c 015 16 00 7C 5C | 	jmp	#LMM_LOOP
00070 016             | LMM_LOOP
00070 016 2F 30 BC 08 |     rdlong LMM_i1, pc
00074 017 04 5E FC 80 |     add    pc, #4
00078 018             | LMM_i1
00078 018 00 00 00 00 |     nop
0007c 019 2F 36 BC 08 |     rdlong LMM_i2, pc
00080 01a 04 5E FC 80 |     add    pc, #4
00084 01b             | LMM_i2
00084 01b 00 00 00 00 |     nop
00088 01c 2F 3C BC 08 |     rdlong LMM_i3, pc
0008c 01d 04 5E FC 80 |     add    pc, #4
00090 01e             | LMM_i3
00090 01e 00 00 00 00 |     nop
00094 01f 2F 42 BC 08 |     rdlong LMM_i4, pc
00098 020 04 5E FC 80 |     add    pc, #4
0009c 021             | LMM_i4
0009c 021 00 00 00 00 |     nop
000a0 022 2F 48 BC 08 |     rdlong LMM_i5, pc
000a4 023 04 5E FC 80 |     add    pc, #4
000a8 024             | LMM_i5
000a8 024 00 00 00 00 |     nop
000ac 025 2F 4E BC 08 |     rdlong LMM_i6, pc
000b0 026 04 5E FC 80 |     add    pc, #4
000b4 027             | LMM_i6
000b4 027 00 00 00 00 |     nop
000b8 028 2F 54 BC 08 |     rdlong LMM_i7, pc
000bc 029 04 5E FC 80 |     add    pc, #4
000c0 02a             | LMM_i7
000c0 02a 00 00 00 00 |     nop
000c4 02b 2F 5A BC 08 |     rdlong LMM_i8, pc
000c8 02c 04 5E FC 80 |     add    pc, #4
000cc 02d             | LMM_i8
000cc 02d 00 00 00 00 |     nop
000d0 02e             | LMM_jmptop
000d0 02e 16 00 7C 5C |     jmp    #LMM_LOOP
000d4 02f             | pc
000d4 02f C4 02 00 00 |     long @@@hubentry
000d8 030             | lr
000d8 030 00 00 00 00 |     long 0
000dc 031             | hubretptr
000dc 031 C0 02 00 00 |     long @@@hub_ret_to_cog
000e0 032             | LMM_NEW_PC
000e0 032 00 00 00 00 |     long   0
000e4 033             |     ' fall through
000e4 033             | LMM_CALL
000e4 033 2F 64 BC 08 |     rdlong LMM_NEW_PC, pc
000e8 034 04 5E FC 80 |     add    pc, #4
000ec 035             | LMM_CALL_PTR
000ec 035 A9 5E 3C 08 |     wrlong pc, sp
000f0 036 04 52 FD 80 |     add    sp, #4
000f4 037             | LMM_JUMP_PTR
000f4 037 32 5E BC A0 |     mov    pc, LMM_NEW_PC
000f8 038 16 00 7C 5C |     jmp    #LMM_LOOP
000fc 039             | LMM_JUMP
000fc 039 2F 5E BC 08 |     rdlong pc, pc
00100 03a 16 00 7C 5C |     jmp    #LMM_LOOP
00104 03b             | LMM_RET
00104 03b 04 52 FD 84 |     sub    sp, #4
00108 03c A9 5E BC 08 |     rdlong pc, sp
0010c 03d 16 00 7C 5C |     jmp    #LMM_LOOP
00110 03e             | LMM_CALL_FROM_COG
00110 03e A9 62 3C 08 |     wrlong  hubretptr, sp
00114 03f 04 52 FD 80 |     add     sp, #4
00118 040 16 00 7C 5C |     jmp  #LMM_LOOP
0011c 041             | LMM_CALL_FROM_COG_ret
0011c 041 00 00 7C 5C |     ret
00120 042             |     
00120 042             | LMM_CALL_ret
00120 042             | LMM_CALL_PTR_ret
00120 042             | LMM_JUMP_ret
00120 042             | LMM_JUMP_PTR_ret
00120 042             | LMM_RET_ret
00120 042             | LMM_RA
00120 042 00 00 00 00 |     long	0
00124 043             |     
00124 043             | LMM_FCACHE_LOAD
00124 043 2F B6 BC 08 |     rdlong FCOUNT_, pc
00128 044 04 5E FC 80 |     add    pc, #4
0012c 045 2F B4 BC A0 |     mov    ADDR_, pc
00130 046 2F B2 BC 84 |     sub    LMM_ADDR_, pc
00134 047 54 B2 7C EC |     tjz    LMM_ADDR_, #a_fcachegoaddpc
00138 048 B9 94 FC 54 |     movd   a_fcacheldlp, #LMM_FCACHE_START
0013c 049 02 B6 FC 28 |     shr    FCOUNT_, #2
00140 04a             | a_fcacheldlp
00140 04a 2F 00 BC 08 |     rdlong 0-0, pc
00144 04b 04 5E FC 80 |     add    pc, #4
00148 04c 57 94 BC 80 |     add    a_fcacheldlp,inc_dest1
0014c 04d 4A B6 FC E4 |     djnz   FCOUNT_,#a_fcacheldlp
00150 04e             |     '' add in a JMP back out of LMM
00150 04e 09 94 FC 20 |     ror    a_fcacheldlp, #9
00154 04f 4A A2 BC 54 |     movd   a_fcachecopyjmp, a_fcacheldlp
00158 050 09 94 FC 24 |     rol    a_fcacheldlp, #9
0015c 051             | a_fcachecopyjmp
0015c 051 2E 00 BC A0 |     mov    0-0, LMM_jmptop
00160 052             | a_fcachego
00160 052 5A B2 BC A0 |     mov    LMM_ADDR_, ADDR_
00164 053 B9 70 FD 5C |     jmpret LMM_RETREG,#LMM_FCACHE_START
00168 054             | a_fcachegoaddpc
00168 054 5B 5E BC 80 |     add    pc, FCOUNT_
0016c 055 52 00 7C 5C |     jmp    #a_fcachego
00170 056             | LMM_FCACHE_LOAD_ret
00170 056 00 00 7C 5C |     ret
00174 057             | inc_dest1
00174 057 00 02 00 00 |     long (1<<9)
00178 058             | LMM_LEAVE_CODE
00178 058 B8 00 3C 5C |     jmp LMM_RETREG
0017c 059             | LMM_ADDR_
0017c 059 00 00 00 00 |     long 0
00180 05a             | ADDR_
00180 05a 00 00 00 00 |     long 0
00184 05b             | FCOUNT_
00184 05b 00 00 00 00 |     long 0
00188 05c             | COUNT_
00188 05c 00 00 00 00 |     long 0
0018c 05d             | prcnt_
0018c 05d 00 00 00 00 |     long 0
00190 05e             | pushregs_
00190 05e B4 C2 FC 54 |       movd  :write, #local01
00194 05f 5C BA BC A2 |       mov   prcnt_, COUNT_ wz
00198 060 65 00 68 5C |   if_z jmp  #pushregs_done_
0019c 061             | :write
0019c 061 A9 00 3C 08 |       wrlong 0-0, sp
001a0 062 57 C2 BC 80 |       add    :write, inc_dest1
001a4 063 04 52 FD 80 |       add    sp, #4
001a8 064 61 BA FC E4 |       djnz   prcnt_, #:write
001ac 065             | pushregs_done_
001ac 065 A9 B8 3C 08 |       wrlong COUNT_, sp
001b0 066 04 52 FD 80 |       add    sp, #4
001b4 067 A9 36 3D 08 |       wrlong fp, sp
001b8 068 04 52 FD 80 |       add    sp, #4
001bc 069 A9 36 BD A0 |       mov    fp, sp
001c0 06a             | pushregs__ret
001c0 06a 00 00 7C 5C |       ret
001c4 06b             | popregs_
001c4 06b 04 52 FD 84 |       sub   sp, #4
001c8 06c A9 36 BD 08 |       rdlong fp, sp
001cc 06d 04 52 FD 84 |       sub   sp, #4
001d0 06e A9 B8 BC 0A |       rdlong COUNT_, sp wz
001d4 06f 77 00 68 5C |   if_z jmp  #popregs__ret
001d8 070 B4 B8 FC 80 |       add   COUNT_, #local01
001dc 071 5C EA BC 54 |       movd  :read, COUNT_
001e0 072 B4 B8 FC 84 |       sub   COUNT_, #local01
001e4 073             | :loop
001e4 073 57 EA BC 84 |       sub    :read, inc_dest1
001e8 074 04 52 FD 84 |       sub    sp, #4
001ec 075             | :read
001ec 075 A9 00 BC 08 |       rdlong 0-0, sp
001f0 076 73 B8 FC E4 |       djnz   COUNT_, #:loop
001f4 077             | popregs__ret
001f4 077 00 00 7C 5C |       ret
001f8 078             | 
001f8 078             | multiply_
001f8 078 B6 48 BD A0 |        mov    itmp2_, muldiva_
001fc 079 B7 48 BD 6C |        xor    itmp2_, muldivb_
00200 07a B6 6C BD A8 |        abs    muldiva_, muldiva_
00204 07b B7 6E BD A8 |        abs    muldivb_, muldivb_
00208 07c 7E 00 7C 5C |        jmp    #do_multiply_
0020c 07d             | unsmultiply_
0020c 07d 00 48 FD A0 |        mov    itmp2_, #0
00210 07e             | do_multiply_
00210 07e 00 50 FD A0 | 	mov    result1, #0
00214 07f             | mul_lp_
00214 07f 01 6E FD 2B | 	shr    muldivb_, #1 wc,wz
00218 080 B6 50 B1 80 |  if_c	add    result1, muldiva_
0021c 081 01 6C FD 2C | 	shl    muldiva_, #1
00220 082 7F 00 54 5C |  if_ne	jmp    #mul_lp_
00224 083 1F 48 FD 2A |        shr    itmp2_, #31 wz
00228 084 A8 6C BD BC |        negnz  muldiva_, result1
0022c 085             | multiply__ret
0022c 085             | unsmultiply__ret
0022c 085 00 00 7C 5C | 	ret
00230 086             | ' code originally from spin interpreter, modified slightly
00230 086             | 
00230 086             | unsdivide_
00230 086 00 48 FD A0 |        mov     itmp2_,#0
00234 087 8D 00 7C 5C |        jmp     #udiv__
00238 088             | 
00238 088             | divide_
00238 088 B6 6C BD A9 |        abs     muldiva_,muldiva_     wc       'abs(x)
0023c 089 8D 48 BD 70 |        muxc    itmp2_,divide_haxx_            'store sign of x (mov x,#1 has bits 0 and 31 set)
00240 08a B7 6E BD AB |        abs     muldivb_,muldivb_     wc,wz    'abs(y)
00244 08b 99 00 68 5C |  if_z  jmp     #divbyzero__
00248 08c 01 48 F1 6C |  if_c  xor     itmp2_,#1                      'store sign of y
0024c 08d             | udiv__
0024c 08d             | divide_haxx_
0024c 08d 01 46 FD A0 |         mov     itmp1_,#1                    'unsigned divide (bit 0 is discarded)
00250 08e 20 34 FD A0 |         mov     DIVCNT,#32
00254 08f             | mdiv__
00254 08f 01 6E FD 2B |         shr     muldivb_,#1        wc,wz
00258 090 01 46 FD 30 |         rcr     itmp1_,#1
0025c 091 8F 34 D5 E4 |  if_nz   djnz    DIVCNT,#mdiv__
00260 092             | mdiv2__
00260 092 A3 6C BD E1 |         cmpsub  muldiva_,itmp1_        wc
00264 093 01 6E FD 34 |         rcl     muldivb_,#1
00268 094 01 46 FD 28 |         shr     itmp1_,#1
0026c 095 92 34 FD E4 |         djnz    DIVCNT,#mdiv2__
00270 096 1F 48 FD 2B |         shr     itmp2_,#31       wc,wz    'restore sign
00274 097 B6 6C BD BC |         negnz   muldiva_,muldiva_         'remainder
00278 098 B7 6E BD B2 |         negc    muldivb_,muldivb_ wz      'division result
0027c 099             | divbyzero__
0027c 099             | divide__ret
0027c 099             | unsdivide__ret
0027c 099 00 00 7C 5C | 	ret
00280 09a             | DIVCNT
00280 09a 00 00 00 00 | 	long	0
00284 09b             | 
00284 09b             | fp
00284 09b 00 00 00 00 | 	long	0
00288 09c             | imm_1000000_
00288 09c 40 42 0F 00 | 	long	1000000
0028c 09d             | imm_1000_
0028c 09d E8 03 00 00 | 	long	1000
00290 09e             | imm_1032_
00290 09e 08 04 00 00 | 	long	1032
00294 09f             | imm_20480_
00294 09f 00 50 00 00 | 	long	20480
00298 0a0             | imm_32768_
00298 0a0 00 80 00 00 | 	long	32768
0029c 0a1             | imm_4294967295_
0029c 0a1 FF FF FF FF | 	long	-1
002a0 0a2             | imm_6250000_
002a0 0a2 10 5E 5F 00 | 	long	6250000
002a4 0a3             | itmp1_
002a4 0a3 00 00 00 00 | 	long	0
002a8 0a4             | itmp2_
002a8 0a4 00 00 00 00 | 	long	0
002ac 0a5             | objptr
002ac 0a5 B4 07 00 00 | 	long	@@@objmem
002b0 0a6             | ptr___system__dat__
002b0 0a6 8C 07 00 00 | 	long	@@@__system__dat_
002b4 0a7             | ptr_hubexit_
002b4 0a7 48 07 00 00 | 	long	@@@hubexit
002b8 0a8             | result1
002b8 0a8 00 00 00 00 | 	long	0
002bc 0a9             | sp
002bc 0a9 B4 07 00 00 | 	long	@@@stackspace
002c0 0aa             | COG_BSS_START
002c0 0aa             | 	fit	496
002c0 0aa             | hub_ret_to_cog
002c0 0aa 41 00 7C 5C | 	jmp	#LMM_CALL_FROM_COG_ret
002c4 0ab             | hubentry
002c4 0ab             | 
002c4 0ab             | _set_directions
002c4 0ab B1 60 3D C3 | 	cmps	arg01, arg02 wc,wz
002c8 0ac B1 54 B1 A0 |  if_b	mov	_var01, arg02
002cc 0ad B0 62 B1 A0 |  if_b	mov	arg02, arg01
002d0 0ae AA 60 B1 A0 |  if_b	mov	arg01, _var01
002d4 0af 00 56 FD A0 | 	mov	_var02, #0
002d8 0b0 1F 62 7D C3 | 	cmps	arg02, #31 wc,wz
002dc 0b1 20 62 C5 84 |  if_a	sub	arg02, #32
002e0 0b2 20 60 C5 84 |  if_a	sub	arg01, #32
002e4 0b3 01 56 C5 A4 |  if_a	neg	_var02, #1
002e8 0b4 01 58 FD A4 | 	neg	_var03, #1
002ec 0b5 B0 5A BD A0 | 	mov	_var04, arg01
002f0 0b6 B1 5A BD 84 | 	sub	_var04, arg02
002f4 0b7 1F 5C FD A0 | 	mov	_var05, #31
002f8 0b8 AD 5C BD 84 | 	sub	_var05, _var04
002fc 0b9 AE 58 BD 2C | 	shl	_var03, _var05
00300 0ba 1F 5C FD A0 | 	mov	_var05, #31
00304 0bb B0 5C BD 84 | 	sub	_var05, arg01
00308 0bc AE 58 BD 28 | 	shr	_var03, _var05
0030c 0bd A1 58 BD 6C | 	xor	_var03, imm_4294967295_
00310 0be B1 64 BD 2C | 	shl	arg03, arg02
00314 0bf A1 56 3D 86 | 	cmp	_var02, imm_4294967295_ wz
00318 0c0 14 5E D4 80 |  if_ne	add	pc, #4*(LR__0001 - ($+1))
0031c 0c1 F7 5F BD A0 | 	mov	_var06, dirb
00320 0c2 AC 5E BD 60 | 	and	_var06, _var03
00324 0c3 B2 5E BD 68 | 	or	_var06, arg03
00328 0c4 AF EE BF A0 | 	mov	dirb, _var06
0032c 0c5 10 5E FC 80 | 	add	pc, #4*(LR__0002 - ($+1))
00330 0c6             | LR__0001
00330 0c6 F6 5F BD A0 | 	mov	_var06, dira
00334 0c7 AC 5E BD 60 | 	and	_var06, _var03
00338 0c8 B2 5E BD 68 | 	or	_var06, arg03
0033c 0c9 AF EC BF A0 | 	mov	dira, _var06
00340 0ca             | LR__0002
00340 0ca             | _set_directions_ret
00340 0ca 3B 84 FC 5C | 	call	#LMM_RET
00344 0cb             | 
00344 0cb             | _wait
00344 0cb 00 50 FD 08 | 	rdlong	result1, #0
00348 0cc A8 6C BD A0 | 	mov	muldiva_, result1
0034c 0cd 9D 6E BD A0 | 	mov	muldivb_, imm_1000_
00350 0ce 86 32 FD 5C | 	call	#unsdivide_
00354 0cf B7 6C BD A0 | 	mov	muldiva_, muldivb_
00358 0d0 B0 6E BD A0 | 	mov	muldivb_, arg01
0035c 0d1 7D 0A FD 5C | 	call	#unsmultiply_
00360 0d2 F1 6D BD 80 | 	add	muldiva_, cnt
00364 0d3 00 6C FD F8 | 	waitcnt	muldiva_, #0
00368 0d4             | _wait_ret
00368 0d4 3B 84 FC 5C | 	call	#LMM_RET
0036c 0d5             | 
0036c 0d5             | _command
0036c 0d5 02 B8 FC A0 | 	mov	COUNT_, #2
00370 0d6 5E D4 FC 5C | 	call	#pushregs_
00374 0d7 01 EC FF 68 | 	or	dira, #1
00378 0d8 01 E8 FF 64 | 	andn	outa, #1
0037c 0d9 04 EC FF 68 | 	or	dira, #4
00380 0da 04 E8 FF 64 | 	andn	outa, #4
00384 0db 08 EC FF 68 | 	or	dira, #8
00388 0dc 08 E8 FF 64 | 	andn	outa, #8
0038c 0dd 08 E8 FF 68 | 	or	outa, #8
00390 0de 08 E8 FF 64 | 	andn	outa, #8
00394 0df 00 68 FD A0 | 	mov	local01, #0
00398 0e0 43 AC FC 5C | 	call	#LMM_FCACHE_LOAD
0039c 0e1 48 00 00 00 | 	long	(@@@LR__0004-@@@LR__0003)
003a0 0e2             | '     _pinl( 0 ) ;
003a0 0e2             | '     _pinl( 2 ) ;
003a0 0e2             | '     _pinl( 3 ) ;
003a0 0e2             | '     _pinh( 3 ) ;
003a0 0e2             | '     _pinl( 3 ) ;
003a0 0e2             | ' 
003a0 0e2             | '     for(int i=0; i < 8; i++) {
003a0 0e2             | LR__0003
003a0 0e2 08 68 7D C3 | 	cmps	local01, #8 wc,wz
003a4 0e3 CB 00 4C 5C |  if_ae	jmp	#LMM_FCACHE_START + (LR__0005 - LR__0003)
003a8 0e4 B0 6A BD A0 | 	mov	local02, arg01
003ac 0e5 FF 6A FD 60 | 	and	local02, #255
003b0 0e6 80 6A FD 60 | 	and	local02, #128
003b4 0e7 80 6A 7D 86 | 	cmp	local02, #128 wz
003b8 0e8 04 EC EB 68 |  if_e	or	dira, #4
003bc 0e9 04 E8 EB 68 |  if_e	or	outa, #4
003c0 0ea 04 EC D7 68 |  if_ne	or	dira, #4
003c4 0eb 04 E8 D7 64 |  if_ne	andn	outa, #4
003c8 0ec FF 60 FD 60 | 	and	arg01, #255
003cc 0ed 01 60 FD 2C | 	shl	arg01, #1
003d0 0ee 08 EC FF 68 | 	or	dira, #8
003d4 0ef 08 E8 FF 64 | 	andn	outa, #8
003d8 0f0 08 E8 FF 68 | 	or	outa, #8
003dc 0f1 08 E8 FF 64 | 	andn	outa, #8
003e0 0f2 01 68 FD 80 | 	add	local01, #1
003e4 0f3 B9 00 7C 5C | 	jmp	#LMM_FCACHE_START + (LR__0003 - LR__0003)
003e8 0f4             | LR__0004
003e8 0f4             | LR__0005
003e8 0f4 01 EC FF 68 | 	or	dira, #1
003ec 0f5 01 E8 FF 68 | 	or	outa, #1
003f0 0f6 9B 52 BD A0 | 	mov	sp, fp
003f4 0f7 6B EE FC 5C | 	call	#popregs_
003f8 0f8             | _command_ret
003f8 0f8 3B 84 FC 5C | 	call	#LMM_RET
003fc 0f9             | 
003fc 0f9             | _data
003fc 0f9 02 B8 FC A0 | 	mov	COUNT_, #2
00400 0fa 5E D4 FC 5C | 	call	#pushregs_
00404 0fb 01 EC FF 68 | 	or	dira, #1
00408 0fc 01 E8 FF 64 | 	andn	outa, #1
0040c 0fd 04 EC FF 68 | 	or	dira, #4
00410 0fe 04 E8 FF 68 | 	or	outa, #4
00414 0ff 08 EC FF 68 | 	or	dira, #8
00418 100 08 E8 FF 64 | 	andn	outa, #8
0041c 101 08 E8 FF 68 | 	or	outa, #8
00420 102 08 E8 FF 64 | 	andn	outa, #8
00424 103 00 68 FD A0 | 	mov	local01, #0
00428 104 43 AC FC 5C | 	call	#LMM_FCACHE_LOAD
0042c 105 48 00 00 00 | 	long	(@@@LR__0007-@@@LR__0006)
00430 106             | '     _pinl( 0 ) ;
00430 106             | '     _pinh( 2 ) ;
00430 106             | '     _pinl( 3 ) ;
00430 106             | '     _pinh( 3 ) ;
00430 106             | '     _pinl( 3 ) ;
00430 106             | ' 
00430 106             | '     for(int i=0; i < 8; i++) {
00430 106             | LR__0006
00430 106 08 68 7D C3 | 	cmps	local01, #8 wc,wz
00434 107 CB 00 4C 5C |  if_ae	jmp	#LMM_FCACHE_START + (LR__0008 - LR__0006)
00438 108 B0 6A BD A0 | 	mov	local02, arg01
0043c 109 FF 6A FD 60 | 	and	local02, #255
00440 10a 80 6A FD 60 | 	and	local02, #128
00444 10b 80 6A 7D 86 | 	cmp	local02, #128 wz
00448 10c 04 EC EB 68 |  if_e	or	dira, #4
0044c 10d 04 E8 EB 68 |  if_e	or	outa, #4
00450 10e 04 EC D7 68 |  if_ne	or	dira, #4
00454 10f 04 E8 D7 64 |  if_ne	andn	outa, #4
00458 110 FF 60 FD 60 | 	and	arg01, #255
0045c 111 01 60 FD 2C | 	shl	arg01, #1
00460 112 08 EC FF 68 | 	or	dira, #8
00464 113 08 E8 FF 64 | 	andn	outa, #8
00468 114 08 E8 FF 68 | 	or	outa, #8
0046c 115 08 E8 FF 64 | 	andn	outa, #8
00470 116 01 68 FD 80 | 	add	local01, #1
00474 117 B9 00 7C 5C | 	jmp	#LMM_FCACHE_START + (LR__0006 - LR__0006)
00478 118             | LR__0007
00478 118             | LR__0008
00478 118 01 EC FF 68 | 	or	dira, #1
0047c 119 01 E8 FF 68 | 	or	outa, #1
00480 11a 9B 52 BD A0 | 	mov	sp, fp
00484 11b 6B EE FC 5C | 	call	#popregs_
00488 11c             | _data_ret
00488 11c 3B 84 FC 5C | 	call	#LMM_RET
0048c 11d             | 
0048c 11d             | _main
0048c 11d 01 B8 FC A0 | 	mov	COUNT_, #1
00490 11e 5E D4 FC 5C | 	call	#pushregs_
00494 11f 9E 60 BD A0 | 	mov	arg01, imm_1032_
00498 120 A2 62 BD A0 | 	mov	arg02, imm_6250000_
0049c 121 33 84 FC 5C | 	call	#LMM_CALL
004a0 122 4C 07 00 00 | 	long	@@@__system___clkset
004a4 123 A0 EC BF 68 | 	or	dira, imm_32768_
004a8 124 A0 E8 BF 68 | 	or	outa, imm_32768_
004ac 125 0A 60 FD A0 | 	mov	arg01, #10
004b0 126 33 84 FC 5C | 	call	#LMM_CALL
004b4 127 44 03 00 00 | 	long	@@@_wait
004b8 128 A0 EC BF 68 | 	or	dira, imm_32768_
004bc 129 A0 E8 BF 64 | 	andn	outa, imm_32768_
004c0 12a 00 60 FD A0 | 	mov	arg01, #0
004c4 12b 03 62 FD A0 | 	mov	arg02, #3
004c8 12c 0F 64 FD A0 | 	mov	arg03, #15
004cc 12d 33 84 FC 5C | 	call	#LMM_CALL
004d0 12e C4 02 00 00 | 	long	@@@_set_directions
004d4 12f 04 EC FF 68 | 	or	dira, #4
004d8 130 04 E8 FF 68 | 	or	outa, #4
004dc 131 08 EC FF 68 | 	or	dira, #8
004e0 132 08 E8 FF 68 | 	or	outa, #8
004e4 133 02 EC FF 68 | 	or	dira, #2
004e8 134 02 E8 FF 64 | 	andn	outa, #2
004ec 135 0A 60 FD A0 | 	mov	arg01, #10
004f0 136 33 84 FC 5C | 	call	#LMM_CALL
004f4 137 44 03 00 00 | 	long	@@@_wait
004f8 138 02 EC FF 68 | 	or	dira, #2
004fc 139 02 E8 FF 68 | 	or	outa, #2
00500 13a 0A 60 FD A0 | 	mov	arg01, #10
00504 13b 33 84 FC 5C | 	call	#LMM_CALL
00508 13c 44 03 00 00 | 	long	@@@_wait
0050c 13d 11 60 FD A0 | 	mov	arg01, #17
00510 13e 33 84 FC 5C | 	call	#LMM_CALL
00514 13f 6C 03 00 00 | 	long	@@@_command
00518 140 0A 60 FD A0 | 	mov	arg01, #10
0051c 141 33 84 FC 5C | 	call	#LMM_CALL
00520 142 44 03 00 00 | 	long	@@@_wait
00524 143 28 60 FD A0 | 	mov	arg01, #40
00528 144 33 84 FC 5C | 	call	#LMM_CALL
0052c 145 6C 03 00 00 | 	long	@@@_command
00530 146 26 60 FD A0 | 	mov	arg01, #38
00534 147 33 84 FC 5C | 	call	#LMM_CALL
00538 148 6C 03 00 00 | 	long	@@@_command
0053c 149 04 60 FD A0 | 	mov	arg01, #4
00540 14a 33 84 FC 5C | 	call	#LMM_CALL
00544 14b FC 03 00 00 | 	long	@@@_data
00548 14c B1 60 FD A0 | 	mov	arg01, #177
0054c 14d 33 84 FC 5C | 	call	#LMM_CALL
00550 14e 6C 03 00 00 | 	long	@@@_command
00554 14f 0A 60 FD A0 | 	mov	arg01, #10
00558 150 33 84 FC 5C | 	call	#LMM_CALL
0055c 151 FC 03 00 00 | 	long	@@@_data
00560 152 14 60 FD A0 | 	mov	arg01, #20
00564 153 33 84 FC 5C | 	call	#LMM_CALL
00568 154 FC 03 00 00 | 	long	@@@_data
0056c 155 C0 60 FD A0 | 	mov	arg01, #192
00570 156 33 84 FC 5C | 	call	#LMM_CALL
00574 157 6C 03 00 00 | 	long	@@@_command
00578 158 0A 60 FD A0 | 	mov	arg01, #10
0057c 159 33 84 FC 5C | 	call	#LMM_CALL
00580 15a FC 03 00 00 | 	long	@@@_data
00584 15b 00 60 FD A0 | 	mov	arg01, #0
00588 15c 33 84 FC 5C | 	call	#LMM_CALL
0058c 15d FC 03 00 00 | 	long	@@@_data
00590 15e C1 60 FD A0 | 	mov	arg01, #193
00594 15f 33 84 FC 5C | 	call	#LMM_CALL
00598 160 6C 03 00 00 | 	long	@@@_command
0059c 161 02 60 FD A0 | 	mov	arg01, #2
005a0 162 33 84 FC 5C | 	call	#LMM_CALL
005a4 163 FC 03 00 00 | 	long	@@@_data
005a8 164 C5 60 FD A0 | 	mov	arg01, #197
005ac 165 33 84 FC 5C | 	call	#LMM_CALL
005b0 166 6C 03 00 00 | 	long	@@@_command
005b4 167 2F 60 FD A0 | 	mov	arg01, #47
005b8 168 33 84 FC 5C | 	call	#LMM_CALL
005bc 169 FC 03 00 00 | 	long	@@@_data
005c0 16a 3E 60 FD A0 | 	mov	arg01, #62
005c4 16b 33 84 FC 5C | 	call	#LMM_CALL
005c8 16c FC 03 00 00 | 	long	@@@_data
005cc 16d C7 60 FD A0 | 	mov	arg01, #199
005d0 16e 33 84 FC 5C | 	call	#LMM_CALL
005d4 16f 6C 03 00 00 | 	long	@@@_command
005d8 170 40 60 FD A0 | 	mov	arg01, #64
005dc 171 33 84 FC 5C | 	call	#LMM_CALL
005e0 172 FC 03 00 00 | 	long	@@@_data
005e4 173 2A 60 FD A0 | 	mov	arg01, #42
005e8 174 33 84 FC 5C | 	call	#LMM_CALL
005ec 175 6C 03 00 00 | 	long	@@@_command
005f0 176 00 60 FD A0 | 	mov	arg01, #0
005f4 177 33 84 FC 5C | 	call	#LMM_CALL
005f8 178 FC 03 00 00 | 	long	@@@_data
005fc 179 00 60 FD A0 | 	mov	arg01, #0
00600 17a 33 84 FC 5C | 	call	#LMM_CALL
00604 17b FC 03 00 00 | 	long	@@@_data
00608 17c 00 60 FD A0 | 	mov	arg01, #0
0060c 17d 33 84 FC 5C | 	call	#LMM_CALL
00610 17e FC 03 00 00 | 	long	@@@_data
00614 17f 7F 60 FD A0 | 	mov	arg01, #127
00618 180 33 84 FC 5C | 	call	#LMM_CALL
0061c 181 FC 03 00 00 | 	long	@@@_data
00620 182 2B 60 FD A0 | 	mov	arg01, #43
00624 183 33 84 FC 5C | 	call	#LMM_CALL
00628 184 6C 03 00 00 | 	long	@@@_command
0062c 185 00 60 FD A0 | 	mov	arg01, #0
00630 186 33 84 FC 5C | 	call	#LMM_CALL
00634 187 FC 03 00 00 | 	long	@@@_data
00638 188 00 60 FD A0 | 	mov	arg01, #0
0063c 189 33 84 FC 5C | 	call	#LMM_CALL
00640 18a FC 03 00 00 | 	long	@@@_data
00644 18b 00 60 FD A0 | 	mov	arg01, #0
00648 18c 33 84 FC 5C | 	call	#LMM_CALL
0064c 18d FC 03 00 00 | 	long	@@@_data
00650 18e 9F 60 FD A0 | 	mov	arg01, #159
00654 18f 33 84 FC 5C | 	call	#LMM_CALL
00658 190 FC 03 00 00 | 	long	@@@_data
0065c 191 36 60 FD A0 | 	mov	arg01, #54
00660 192 33 84 FC 5C | 	call	#LMM_CALL
00664 193 6C 03 00 00 | 	long	@@@_command
00668 194 C0 60 FD A0 | 	mov	arg01, #192
0066c 195 33 84 FC 5C | 	call	#LMM_CALL
00670 196 FC 03 00 00 | 	long	@@@_data
00674 197 3A 60 FD A0 | 	mov	arg01, #58
00678 198 33 84 FC 5C | 	call	#LMM_CALL
0067c 199 6C 03 00 00 | 	long	@@@_command
00680 19a 06 60 FD A0 | 	mov	arg01, #6
00684 19b 33 84 FC 5C | 	call	#LMM_CALL
00688 19c FC 03 00 00 | 	long	@@@_data
0068c 19d 29 60 FD A0 | 	mov	arg01, #41
00690 19e 33 84 FC 5C | 	call	#LMM_CALL
00694 19f 6C 03 00 00 | 	long	@@@_command
00698 1a0 0A 60 FD A0 | 	mov	arg01, #10
0069c 1a1 33 84 FC 5C | 	call	#LMM_CALL
006a0 1a2 44 03 00 00 | 	long	@@@_wait
006a4 1a3 2C 60 FD A0 | 	mov	arg01, #44
006a8 1a4 33 84 FC 5C | 	call	#LMM_CALL
006ac 1a5 6C 03 00 00 | 	long	@@@_command
006b0 1a6             | '     _clkset(XTAL1 + PLL16X, 6250000) ;
006b0 1a6             | '     _pinh( 15 ) ;
006b0 1a6             | '     wait(10);
006b0 1a6             | '     _pinl( 15 ) ;
006b0 1a6             | ' 
006b0 1a6             | ' 
006b0 1a6             | '     set_directions(0, 3, 0b1111);
006b0 1a6             | ' 
006b0 1a6             | '     _pinh( 2 ) ;
006b0 1a6             | '     _pinh( 3 ) ;
006b0 1a6             | '     _pinl( 1 ) ;
006b0 1a6             | '     wait(10);
006b0 1a6             | '     _pinh( 1 ) ;
006b0 1a6             | '     wait(10);
006b0 1a6             | '     command(0x11);
006b0 1a6             | '     wait(10);
006b0 1a6             | '     command(0x28);
006b0 1a6             | '     command(0x26);
006b0 1a6             | '     data(0x04);
006b0 1a6             | ' 
006b0 1a6             | '     command(0xb1);
006b0 1a6             | '     data(0x0a);
006b0 1a6             | '     data(0x14);
006b0 1a6             | ' 
006b0 1a6             | '     command(0xc0);
006b0 1a6             | '     data(0x0a);
006b0 1a6             | '     data(0x00);
006b0 1a6             | ' 
006b0 1a6             | '     command(0xc1);
006b0 1a6             | '     data(0x02);
006b0 1a6             | ' 
006b0 1a6             | '     command(0xc5);
006b0 1a6             | '     data(0x2f);
006b0 1a6             | '     data(0x3e);
006b0 1a6             | ' 
006b0 1a6             | '     command(0xc7);
006b0 1a6             | '     data(0x40);
006b0 1a6             | ' 
006b0 1a6             | '     command(0x2a);
006b0 1a6             | '     data(0x00);
006b0 1a6             | ' 
006b0 1a6             | '     data(0x00);
006b0 1a6             | '     data(0x00);
006b0 1a6             | ' 
006b0 1a6             | '     data(0x7f);
006b0 1a6             | '     command(0x2b);
006b0 1a6             | '     data(0x00);
006b0 1a6             | '     data(0x00);
006b0 1a6             | '     data(0x00);
006b0 1a6             | '     data(0x9f);
006b0 1a6             | ' 
006b0 1a6             | '     command(0x36);
006b0 1a6             | '     data(0xc0);
006b0 1a6             | '     command(0x3a);
006b0 1a6             | '     data(0x06);
006b0 1a6             | ' 
006b0 1a6             | '     command(0x29);
006b0 1a6             | '     wait(10);
006b0 1a6             | ' 
006b0 1a6             | '     command(0x2C);
006b0 1a6             | '     while(1){
006b0 1a6             | LR__0009
006b0 1a6             | ' 
006b0 1a6             | '     	for(i = 0; i < 128*160; i++){
006b0 1a6 00 68 FD A0 | 	mov	local01, #0
006b4 1a7             | LR__0010
006b4 1a7 9F 68 3D C3 | 	cmps	local01, imm_20480_ wc,wz
006b8 1a8 2C 5E CC 80 |  if_ae	add	pc, #4*(LR__0011 - ($+1))
006bc 1a9 FF 60 FD A0 | 	mov	arg01, #255
006c0 1aa 33 84 FC 5C | 	call	#LMM_CALL
006c4 1ab FC 03 00 00 | 	long	@@@_data
006c8 1ac 00 60 FD A0 | 	mov	arg01, #0
006cc 1ad 33 84 FC 5C | 	call	#LMM_CALL
006d0 1ae FC 03 00 00 | 	long	@@@_data
006d4 1af 00 60 FD A0 | 	mov	arg01, #0
006d8 1b0 33 84 FC 5C | 	call	#LMM_CALL
006dc 1b1 FC 03 00 00 | 	long	@@@_data
006e0 1b2 01 68 FD 80 | 	add	local01, #1
006e4 1b3 34 5E FC 84 | 	sub	pc, #4*(($+1) - LR__0010)
006e8 1b4             | LR__0011
006e8 1b4 9D 60 BD A0 | 	mov	arg01, imm_1000_
006ec 1b5 33 84 FC 5C | 	call	#LMM_CALL
006f0 1b6 44 03 00 00 | 	long	@@@_wait
006f4 1b7             | '         	    data(0xFF);
006f4 1b7             | '             	data(0x00);
006f4 1b7             | '             	data(0x00);
006f4 1b7             | '  		}
006f4 1b7             | '  		wait(1000);
006f4 1b7             | '  		for(i = 0; i < 128*160; i++){
006f4 1b7 00 68 FD A0 | 	mov	local01, #0
006f8 1b8             | LR__0012
006f8 1b8 9F 68 3D C3 | 	cmps	local01, imm_20480_ wc,wz
006fc 1b9 2C 5E CC 80 |  if_ae	add	pc, #4*(LR__0013 - ($+1))
00700 1ba 00 60 FD A0 | 	mov	arg01, #0
00704 1bb 33 84 FC 5C | 	call	#LMM_CALL
00708 1bc FC 03 00 00 | 	long	@@@_data
0070c 1bd FF 60 FD A0 | 	mov	arg01, #255
00710 1be 33 84 FC 5C | 	call	#LMM_CALL
00714 1bf FC 03 00 00 | 	long	@@@_data
00718 1c0 00 60 FD A0 | 	mov	arg01, #0
0071c 1c1 33 84 FC 5C | 	call	#LMM_CALL
00720 1c2 FC 03 00 00 | 	long	@@@_data
00724 1c3 01 68 FD 80 | 	add	local01, #1
00728 1c4 34 5E FC 84 | 	sub	pc, #4*(($+1) - LR__0012)
0072c 1c5             | LR__0013
0072c 1c5 9D 60 BD A0 | 	mov	arg01, imm_1000_
00730 1c6 33 84 FC 5C | 	call	#LMM_CALL
00734 1c7 44 03 00 00 | 	long	@@@_wait
00738 1c8 8C 5E FC 84 | 	sub	pc, #4*(($+1) - LR__0009)
0073c 1c9 9B 52 BD A0 | 	mov	sp, fp
00740 1ca 6B EE FC 5C | 	call	#popregs_
00744 1cb             | _main_ret
00744 1cb 3B 84 FC 5C | 	call	#LMM_RET
00748 1cc             | hubexit
00748 1cc 05 00 7C 5C | 	jmp	#cogexit
0074c 1cd             | 
0074c 1cd             | __system___clkset
0074c 1cd 00 62 7D 08 | 	wrlong	arg02, #0
00750 1ce 04 60 7D 08 | 	wrlong	arg01, #4
00754 1cf B1 6C BD A0 | 	mov	muldiva_, arg02
00758 1d0 9D 6E BD A0 | 	mov	muldivb_, imm_1000_
0075c 1d1 88 32 FD 5C | 	call	#divide_
00760 1d2 1C 4C FD 80 | 	add	ptr___system__dat__, #28
00764 1d3 A6 6E 3D 08 | 	wrlong	muldivb_, ptr___system__dat__
00768 1d4 1C 4C FD 84 | 	sub	ptr___system__dat__, #28
0076c 1d5 B1 6C BD A0 | 	mov	muldiva_, arg02
00770 1d6 9C 6E BD A0 | 	mov	muldivb_, imm_1000000_
00774 1d7 88 32 FD 5C | 	call	#divide_
00778 1d8 20 4C FD 80 | 	add	ptr___system__dat__, #32
0077c 1d9 A6 6E 3D 08 | 	wrlong	muldivb_, ptr___system__dat__
00780 1da 20 4C FD 84 | 	sub	ptr___system__dat__, #32
00784 1db 00 60 7D 0C | 	clkset	arg01
00788 1dc             | __system___clkset_ret
00788 1dc 3B 84 FC 5C | 	call	#LMM_RET
0078c 1dd             | 	long
0078c 1dd             | __system__dat_
0078c 1dd 00 00 00 00 
00790 1de F0 09 BC 0A 
00794 1df 00 00 68 5C 
00798 1e0 01 08 FC 0C | 	byte	$00, $00, $00, $00, $f0, $09, $bc, $0a, $00, $00, $68, $5c, $01, $08, $fc, $0c
0079c 1e1 03 08 7C 0C 
007a0 1e2 00 00 00 00 
007a4 1e3 03 00 00 00 
007a8 1e4 00 00 00 00 | 	byte	$03, $08, $7c, $0c, $00, $00, $00, $00, $03, $00, $00, $00, $00, $00, $00, $00
007ac 1e5 00 00 00 00 
007b0 1e6 00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
007b4 1e7             | objmem
007b4 1e7             | 	long	0[0]
007b4 1e7             | stackspace
007b4 1e7 00 00 00 00 | 	long	0[1]
007b8 0aa             | 	org	COG_BSS_START
007b8 0aa             | _var01
007b8 0aa             | 	res	1
007b8 0ab             | _var02
007b8 0ab             | 	res	1
007b8 0ac             | _var03
007b8 0ac             | 	res	1
007b8 0ad             | _var04
007b8 0ad             | 	res	1
007b8 0ae             | _var05
007b8 0ae             | 	res	1
007b8 0af             | _var06
007b8 0af             | 	res	1
007b8 0b0             | arg01
007b8 0b0             | 	res	1
007b8 0b1             | arg02
007b8 0b1             | 	res	1
007b8 0b2             | arg03
007b8 0b2             | 	res	1
007b8 0b3             | arg04
007b8 0b3             | 	res	1
007b8 0b4             | local01
007b8 0b4             | 	res	1
007b8 0b5             | local02
007b8 0b5             | 	res	1
007b8 0b6             | muldiva_
007b8 0b6             | 	res	1
007b8 0b7             | muldivb_
007b8 0b7             | 	res	1
007b8 0b8             | LMM_RETREG
007b8 0b8             | 	res	1
007b8 0b9             | LMM_FCACHE_START
007b8 0b9             | 	res	97
007b8 11a             | LMM_FCACHE_END
007b8 11a             | 	fit	496
007b8 11a             | 
